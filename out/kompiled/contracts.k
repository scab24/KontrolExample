requires "foundry.md"

module S2KlibZModforgeZSubstdZModsrcZModCommonBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModCommonBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModCommonBase" [symbol(), klabel(contract_lib%forge-std%src%CommonBase)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModCommonBase ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModCommonBase ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModScriptBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModScriptBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModScriptBase" [symbol(), klabel(contract_lib%forge-std%src%ScriptBase)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModScriptBase ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModScriptBase ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModTestBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestBaseContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestBaseContract ::= "S2KlibZModforgeZSubstdZModsrcZModTestBase" [symbol(), klabel(contract_lib%forge-std%src%TestBase)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModTestBase ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModTestBase ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KscriptZModCounterScript-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KscriptZModCounterScriptContract
    
    syntax S2KscriptZModCounterScriptContract ::= "S2KscriptZModCounterScript" [symbol(), klabel(contract_script%CounterScript)]
    
    rule  ( #binRuntime ( S2KscriptZModCounterScript ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060043610603c5760003560e01c80630a9254e4146041578063c0406226146043578063f8ccbf47146049575b600080fd5b005b6041606f565b600b54605b9062010000900460ff1681565b604051901515815260200160405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663afc980406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801560cc57600080fd5b505af115801560df573d6000803e3d6000fd5b5050505056fea26469706673582212201956e5471553feb7469aeb3defe8db545befa89abec1d4e7fe7be9cf5190e01b64736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KscriptZModCounterScript ) => #parseByteStack ( "0x6080604052600b805462ff00ff19166201000117905534801561002157600080fd5b5061011b806100316000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80630a9254e4146041578063c0406226146043578063f8ccbf47146049575b600080fd5b005b6041606f565b600b54605b9062010000900460ff1681565b604051901515815260200160405180910390f35b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b031663afc980406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801560cc57600080fd5b505af115801560df573d6000803e3d6000fd5b5050505056fea26469706673582212201956e5471553feb7469aeb3defe8db545befa89abec1d4e7fe7be9cf5190e01b64736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KscriptZModCounterScriptContract "." S2KscriptZModCounterScriptMethod [function(), symbol(), klabel(method_script%CounterScript)]
    
    syntax S2KscriptZModCounterScriptMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_CounterScript_S2KISZUndSCRIPT_)]
    
    syntax S2KscriptZModCounterScriptMethod ::= "S2Krun" "(" ")" [symbol(), klabel(method_CounterScript_S2Krun_)]
    
    syntax S2KscriptZModCounterScriptMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_CounterScript_S2KsetUp_)]
    
    rule  ( S2KscriptZModCounterScript . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KscriptZModCounterScript . S2Krun ( ) => #abiCallData ( "run" , .TypedArgs ) )
      
    
    rule  ( S2KscriptZModCounterScript . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "run()" ) => 3225444902 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      

endmodule

module S2KsrcZModCounter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KsrcZModCounterContract
    
    syntax S2KsrcZModCounterContract ::= "S2KsrcZModCounter" [symbol(), klabel(contract_src%Counter)]
    
    rule  ( #binRuntime ( S2KsrcZModCounter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637705040d146100465780638381f58a1461005b578063d09de08a14610076575b600080fd5b6100596100543660046100cf565b61007e565b005b61006460005481565b60405190815260200160405180910390f35b6100596100b9565b600082905562c0ffee8214801561009757506001811515145b156100b55760405163030425a560e01b815260040160405180910390fd5b5050565b6000805490806100c883610104565b9190505550565b600080604083850312156100e257600080fd5b82359150602083013580151581146100f957600080fd5b809150509250929050565b60006001820161012457634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212204311992cff2450c530dbc4f4ac6e7d13cd6d1e902390f1baa90e5a9cf4acdcbe64736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KsrcZModCounter ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610161806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637705040d146100465780638381f58a1461005b578063d09de08a14610076575b600080fd5b6100596100543660046100cf565b61007e565b005b61006460005481565b60405190815260200160405180910390f35b6100596100b9565b600082905562c0ffee8214801561009757506001811515145b156100b55760405163030425a560e01b815260040160405180910390fd5b5050565b6000805490806100c883610104565b9190505550565b600080604083850312156100e257600080fd5b82359150602083013580151581146100f957600080fd5b809150509250929050565b60006001820161012457634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212204311992cff2450c530dbc4f4ac6e7d13cd6d1e902390f1baa90e5a9cf4acdcbe64736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KsrcZModCounterContract "." S2KsrcZModCounterMethod [function(), symbol(), klabel(method_src%Counter)]
    
    syntax S2KsrcZModCounterMethod ::= "S2Kincrement" "(" ")" [symbol(), klabel(method_Counter_S2Kincrement_)]
    
    syntax S2KsrcZModCounterMethod ::= "S2Knumber" "(" ")" [symbol(), klabel(method_Counter_S2Knumber_)]
    
    syntax S2KsrcZModCounterMethod ::= "S2KsetNumber" "(" Int ":" "uint256" "," Int ":" "bool" ")" [symbol(), klabel(method_Counter_S2KsetNumber_uint256_bool)]
    
    rule  ( S2KsrcZModCounter . S2Kincrement ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModCounter . S2Knumber ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KsrcZModCounter . S2KsetNumber ( V0_newNumber : uint256 , V1_inLuck : bool ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , #bool ( V1_inLuck ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_newNumber )
       andBool ( #rangeBool ( V1_inLuck )
               ))
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256,bool)" ) => 1996817421 )
      

endmodule

module S2KtestZModCounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KtestZModCounterTestContract
    
    syntax S2KtestZModCounterTestContract ::= "S2KtestZModCounterTest" [symbol(), klabel(contract_test%CounterTest)]
    
    rule  ( #binRuntime ( S2KtestZModCounterTest ) => #parseByteStack ( "" ) )
      
    
    rule  ( #initBytecode ( S2KtestZModCounterTest ) => #parseByteStack ( "" ) )
      
    
    syntax Bytes ::= S2KtestZModCounterTestContract "." S2KtestZModCounterTestMethod [function(), symbol(), klabel(method_test%CounterTest)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_CounterTest_S2KISZUndTEST_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kcounter" "(" ")" [symbol(), klabel(method_CounterTest_S2Kcounter_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeArtifacts_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeContracts_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_CounterTest_S2KexcludeSenders_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_CounterTest_S2Kfailed_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_CounterTest_S2Kkevm_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KsetUp" "(" ")" [symbol(), klabel(method_CounterTest_S2KsetUp_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetArtifactSelectors_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetArtifacts_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetContracts_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetInterfaces_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetSelectors_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_CounterTest_S2KtargetSenders_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtestIncrement" "(" ")" [symbol(), klabel(method_CounterTest_S2KtestIncrement_)]
    
    syntax S2KtestZModCounterTestMethod ::= "S2KtestSetNumber" "(" Int ":" "uint256" "," Int ":" "bool" ")" [symbol(), klabel(method_CounterTest_S2KtestSetNumber_uint256_bool)]
    
    rule  ( S2KtestZModCounterTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kcounter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KsetUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtestIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KtestZModCounterTest . S2KtestSetNumber ( V0_x : uint256 , V1_inLuck : bool ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , #bool ( V1_inLuck ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeBool ( V1_inLuck )
               ))
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetInterfaces()" ) => 719206528 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256,bool)" ) => 921787026 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract ::= "S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3" [symbol(), klabel(contract_lib%forge-std%src%interfaces%IMulticall3)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Contract "." S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method [function(), symbol(), klabel(method_lib%forge-std%src%interfaces%IMulticall3)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate_tuple[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate3_tuple[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2Kaggregate3Value" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2Kaggregate3Value_tuple[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KblockAndAggregate" "(" K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KblockAndAggregate_tuple[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBasefee" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetBasefee_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockHash" "(" Int ":" "uint256" ")" [symbol(), klabel(method_IMulticall3_S2KgetBlockHash_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetBlockNumber" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetBlockNumber_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetChainId" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetChainId_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockCoinbase" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockCoinbase_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockDifficulty" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockDifficulty_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockGasLimit" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockGasLimit_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetCurrentBlockTimestamp" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetCurrentBlockTimestamp_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetEthBalance" "(" Int ":" "address" ")" [symbol(), klabel(method_IMulticall3_S2KgetEthBalance_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KgetLastBlockHash" "(" ")" [symbol(), klabel(method_IMulticall3_S2KgetLastBlockHash_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryAggregate" "(" Int ":" "bool" "," K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KtryAggregate_bool_tuple[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3Method ::= "S2KtryBlockAndAggregate" "(" Int ":" "bool" "," K ":" "tuple[]" ")" [symbol(), klabel(method_IMulticall3_S2KtryBlockAndAggregate_bool_tuple[])]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBasefee ( ) => #abiCallData ( "getBasefee" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockHash ( V0_blockNumber : uint256 ) => #abiCallData ( "getBlockHash" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetBlockNumber ( ) => #abiCallData ( "getBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetChainId ( ) => #abiCallData ( "getChainId" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockCoinbase ( ) => #abiCallData ( "getCurrentBlockCoinbase" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockDifficulty ( ) => #abiCallData ( "getCurrentBlockDifficulty" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockGasLimit ( ) => #abiCallData ( "getCurrentBlockGasLimit" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetCurrentBlockTimestamp ( ) => #abiCallData ( "getCurrentBlockTimestamp" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetEthBalance ( V0_addr : address ) => #abiCallData ( "getEthBalance" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModinterfacesZModIMulticall3 . S2KgetLastBlockHash ( ) => #abiCallData ( "getLastBlockHash" , .TypedArgs ) )
      
    
    rule  ( selector ( "aggregate((address,bytes)[])" ) => 623753794 )
      
    
    rule  ( selector ( "aggregate3((address,bool,bytes)[])" ) => 2192398027 )
      
    
    rule  ( selector ( "aggregate3Value((address,bool,uint256,bytes)[])" ) => 390982257 )
      
    
    rule  ( selector ( "blockAndAggregate((address,bytes)[])" ) => 3272048553 )
      
    
    rule  ( selector ( "getBasefee()" ) => 1046783638 )
      
    
    rule  ( selector ( "getBlockHash(uint256)" ) => 4001541214 )
      
    
    rule  ( selector ( "getBlockNumber()" ) => 1120645468 )
      
    
    rule  ( selector ( "getChainId()" ) => 872998000 )
      
    
    rule  ( selector ( "getCurrentBlockCoinbase()" ) => 2830128974 )
      
    
    rule  ( selector ( "getCurrentBlockDifficulty()" ) => 1916951965 )
      
    
    rule  ( selector ( "getCurrentBlockGasLimit()" ) => 2262111976 )
      
    
    rule  ( selector ( "getCurrentBlockTimestamp()" ) => 254331261 )
      
    
    rule  ( selector ( "getEthBalance(address)" ) => 1294139852 )
      
    
    rule  ( selector ( "getLastBlockHash()" ) => 669543790 )
      
    
    rule  ( selector ( "tryAggregate(bool,(address,bytes)[])" ) => 3169029079 )
      
    
    rule  ( selector ( "tryBlockAndAggregate(bool,(address,bytes)[])" ) => 966083305 )
      

endmodule

module S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract ::= "S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats" [symbol(), klabel(contract_lib%kontrol-cheatcodes%src%KontrolCheats)]
    
    rule  ( #binRuntime ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsContract "." S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsMethod [function(), symbol(), klabel(method_lib%kontrol-cheatcodes%src%KontrolCheats)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsMethod ::= "S2Kkevm" "(" ")" [symbol(), klabel(method_KontrolCheats_S2Kkevm_)]
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheats . S2Kkevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract ::= "S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase" [symbol(), klabel(contract_lib%kontrol-cheatcodes%src%KontrolCheatsBase)]
    
    rule  ( #binRuntime ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseContract "." S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod [function(), symbol(), klabel(method_lib%kontrol-cheatcodes%src%KontrolCheatsBase)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KallowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KallowCallsToAddress_address)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KallowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KallowChangesToStorage_address_uint256)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectCreate_address_uint256_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectCreate2_address_uint256_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectDelegateCall_address_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectNoCall" "(" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectNoCall_)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectRegularCall_address_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectRegularCall_address_uint256_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KexpectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KexpectStaticCall_address_bytes)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshBool" "(" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KfreshBool_)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KfreshUInt" "(" Int ":" "uint8" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KfreshUInt_uint8)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KinfiniteGas" "(" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KinfiniteGas_)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KsetGas" "(" Int ":" "uint256" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KsetGas_uint256)]
    
    syntax S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBaseMethod ::= "S2KsymbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_KontrolCheatsBase_S2KsymbolicStorage_address)]
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KallowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KallowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KexpectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshBool ( ) => #abiCallData ( "freshBool" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KfreshUInt ( V0_ : uint8 ) => #abiCallData ( "freshUInt" , #uint8 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KinfiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KsetGas ( V0_ : uint256 ) => #abiCallData ( "setGas" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KlibZModkontrolZSubcheatcodesZModsrcZModKontrolCheatsBase . S2KsymbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "freshBool()" ) => 2935720297 )
      
    
    rule  ( selector ( "freshUInt(uint8)" ) => 625253732 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "setGas(uint256)" ) => 3713137314 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20" [symbol(), klabel(contract_lib%forge-std%src%mocks%MockERC20)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101bb578063a9059cbb146101c3578063d505accf146101d6578063dd62ed3e146101e957600080fd5b80633644e5151461017357806370a082311461017b5780637ecebe001461019b57600080fd5b806306fdde03146100d4578063095ea7b3146100f25780631624f6c61461011557806318160ddd1461012a57806323b872dd14610141578063313ce56714610154575b600080fd5b6100dc610214565b6040516100e9919061096d565b60405180910390f35b6101056101003660046109d7565b6102a2565b60405190151581526020016100e9565b610128610123366004610ab5565b61030f565b005b61013360035481565b6040519081526020016100e9565b61010561014f366004610b29565b6103ae565b6002546101619060ff1681565b60405160ff90911681526020016100e9565b6101336104c3565b610133610189366004610b65565b60046020526000908152604090205481565b6101336101a9366004610b65565b60086020526000908152604090205481565b6100dc6104e9565b6101056101d13660046109d7565b6104f6565b6101286101e4366004610b80565b61058d565b6101336101f7366004610bea565b600560209081526000928352604080842090915290825290205481565b6000805461022190610c1d565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610c1d565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102fd9086815260200190565b60405180910390a35060015b92915050565b60095460ff161561035d5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064015b60405180910390fd5b60006103698482610ca6565b5060016103768382610ca6565b506002805460ff191660ff831617905561038e6107eb565b600655610399610804565b60075550506009805460ff1916600117905550565b6001600160a01b0383166000908152600560209081526040808320338452909152812054600019811461040a576103e581846108a7565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461042d90846108a7565b6001600160a01b03808716600090815260046020526040808220939093559086168152205461045c908461090a565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104b09087815260200190565b60405180910390a3506001949350505050565b60006006546104d06107eb565b146104e2576104dd610804565b905090565b5060075490565b6001805461022190610c1d565b3360009081526004602052604081205461051090836108a7565b33600090815260046020526040808220929092556001600160a01b0385168152205461053c908361090a565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102fd9086815260200190565b428410156105dd5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610354565b600060016105e96104c3565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061063783610d7c565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106b092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561070e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107445750876001600160a01b0316816001600160a01b0316145b6107815760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610354565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b6000610969806107fd63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108369190610d95565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108676107eb565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000818310156108f95760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606401610354565b6109038284610e0b565b9392505050565b6000806109178385610e1e565b9050838110156109035760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606401610354565b4690565b600060208083528351808285015260005b8181101561099a5785810183015185820160400152820161097e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109d257600080fd5b919050565b600080604083850312156109ea57600080fd5b6109f3836109bb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a2857600080fd5b813567ffffffffffffffff80821115610a4357610a43610a01565b604051601f8301601f19908116603f01168101908282118183101715610a6b57610a6b610a01565b81604052838152866020858801011115610a8457600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146109d257600080fd5b600080600060608486031215610aca57600080fd5b833567ffffffffffffffff80821115610ae257600080fd5b610aee87838801610a17565b94506020860135915080821115610b0457600080fd5b50610b1186828701610a17565b925050610b2060408501610aa4565b90509250925092565b600080600060608486031215610b3e57600080fd5b610b47846109bb565b9250610b55602085016109bb565b9150604084013590509250925092565b600060208284031215610b7757600080fd5b610903826109bb565b600080600080600080600060e0888a031215610b9b57600080fd5b610ba4886109bb565b9650610bb2602089016109bb565b95506040880135945060608801359350610bce60808901610aa4565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610bfd57600080fd5b610c06836109bb565b9150610c14602084016109bb565b90509250929050565b600181811c90821680610c3157607f821691505b602082108103610c5157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ca157600081815260208120601f850160051c81016020861015610c7e5750805b601f850160051c820191505b81811015610c9d57828155600101610c8a565b5050505b505050565b815167ffffffffffffffff811115610cc057610cc0610a01565b610cd481610cce8454610c1d565b84610c57565b602080601f831160018114610d095760008415610cf15750858301515b600019600386901b1c1916600185901b178555610c9d565b600085815260208120601f198616915b82811015610d3857888601518255948401946001909101908401610d19565b5085821015610d565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201610d8e57610d8e610d66565b5060010190565b6000808354610da381610c1d565b60018281168015610dbb5760018114610dd057610dff565b60ff1984168752821515830287019450610dff565b8760005260208060002060005b85811015610df65781548a820152908401908201610ddd565b50505082870194505b50929695505050505050565b8181038181111561030957610309610d66565b8082018082111561030957610309610d6656fea26469706673582212200bb4f842c0fcf1e6adfe47a09eb8098a484112ef5b03c86618ecc25b83bcf88c64736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610e67806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101bb578063a9059cbb146101c3578063d505accf146101d6578063dd62ed3e146101e957600080fd5b80633644e5151461017357806370a082311461017b5780637ecebe001461019b57600080fd5b806306fdde03146100d4578063095ea7b3146100f25780631624f6c61461011557806318160ddd1461012a57806323b872dd14610141578063313ce56714610154575b600080fd5b6100dc610214565b6040516100e9919061096d565b60405180910390f35b6101056101003660046109d7565b6102a2565b60405190151581526020016100e9565b610128610123366004610ab5565b61030f565b005b61013360035481565b6040519081526020016100e9565b61010561014f366004610b29565b6103ae565b6002546101619060ff1681565b60405160ff90911681526020016100e9565b6101336104c3565b610133610189366004610b65565b60046020526000908152604090205481565b6101336101a9366004610b65565b60086020526000908152604090205481565b6100dc6104e9565b6101056101d13660046109d7565b6104f6565b6101286101e4366004610b80565b61058d565b6101336101f7366004610bea565b600560209081526000928352604080842090915290825290205481565b6000805461022190610c1d565b80601f016020809104026020016040519081016040528092919081815260200182805461024d90610c1d565b801561029a5780601f1061026f5761010080835404028352916020019161029a565b820191906000526020600020905b81548152906001019060200180831161027d57829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102fd9086815260200190565b60405180910390a35060015b92915050565b60095460ff161561035d5760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064015b60405180910390fd5b60006103698482610ca6565b5060016103768382610ca6565b506002805460ff191660ff831617905561038e6107eb565b600655610399610804565b60075550506009805460ff1916600117905550565b6001600160a01b0383166000908152600560209081526040808320338452909152812054600019811461040a576103e581846108a7565b6001600160a01b03861660009081526005602090815260408083203384529091529020555b6001600160a01b03851660009081526004602052604090205461042d90846108a7565b6001600160a01b03808716600090815260046020526040808220939093559086168152205461045c908461090a565b6001600160a01b0380861660008181526004602052604090819020939093559151908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104b09087815260200190565b60405180910390a3506001949350505050565b60006006546104d06107eb565b146104e2576104dd610804565b905090565b5060075490565b6001805461022190610c1d565b3360009081526004602052604081205461051090836108a7565b33600090815260046020526040808220929092556001600160a01b0385168152205461053c908361090a565b6001600160a01b0384166000818152600460205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906102fd9086815260200190565b428410156105dd5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610354565b600060016105e96104c3565b6001600160a01b038a16600090815260086020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d9290919061063783610d7c565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e001604051602081830303815290604052805190602001206040516020016106b092919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561070e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906107445750876001600160a01b0316816001600160a01b0316145b6107815760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610354565b6001600160a01b0381811660009081526005602090815260408083208b8516808552908352928190208a90555189815291928b16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35050505050505050565b6000610969806107fd63ffffffff8216565b9250505090565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108369190610d95565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66108676107eb565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000818310156108f95760405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606401610354565b6109038284610e0b565b9392505050565b6000806109178385610e1e565b9050838110156109035760405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606401610354565b4690565b600060208083528351808285015260005b8181101561099a5785810183015185820160400152820161097e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146109d257600080fd5b919050565b600080604083850312156109ea57600080fd5b6109f3836109bb565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a2857600080fd5b813567ffffffffffffffff80821115610a4357610a43610a01565b604051601f8301601f19908116603f01168101908282118183101715610a6b57610a6b610a01565b81604052838152866020858801011115610a8457600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146109d257600080fd5b600080600060608486031215610aca57600080fd5b833567ffffffffffffffff80821115610ae257600080fd5b610aee87838801610a17565b94506020860135915080821115610b0457600080fd5b50610b1186828701610a17565b925050610b2060408501610aa4565b90509250925092565b600080600060608486031215610b3e57600080fd5b610b47846109bb565b9250610b55602085016109bb565b9150604084013590509250925092565b600060208284031215610b7757600080fd5b610903826109bb565b600080600080600080600060e0888a031215610b9b57600080fd5b610ba4886109bb565b9650610bb2602089016109bb565b95506040880135945060608801359350610bce60808901610aa4565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215610bfd57600080fd5b610c06836109bb565b9150610c14602084016109bb565b90509250929050565b600181811c90821680610c3157607f821691505b602082108103610c5157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ca157600081815260208120601f850160051c81016020861015610c7e5750805b601f850160051c820191505b81811015610c9d57828155600101610c8a565b5050505b505050565b815167ffffffffffffffff811115610cc057610cc0610a01565b610cd481610cce8454610c1d565b84610c57565b602080601f831160018114610d095760008415610cf15750858301515b600019600386901b1c1916600185901b178555610c9d565b600085815260208120601f198616915b82811015610d3857888601518255948401946001909101908401610d19565b5085821015610d565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201610d8e57610d8e610d66565b5060010190565b6000808354610da381610c1d565b60018281168015610dbb5760018114610dd057610dff565b60ff1984168752821515830287019450610dff565b8760005260208060002060005b85811015610df65781548a820152908401908201610ddd565b50505082870194505b50929695505050505050565b8181038181111561030957610309610d66565b8082018082111561030957610309610d6656fea26469706673582212200bb4f842c0fcf1e6adfe47a09eb8098a484112ef5b03c86618ecc25b83bcf88c64736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Contract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method [function(), symbol(), klabel(method_lib%forge-std%src%mocks%MockERC20)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KDOMAINZUndSEPARATOR" "(" ")" [symbol(), klabel(method_MockERC20_S2KDOMAINZUndSEPARATOR_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kallowance" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_MockERC20_S2Kallowance_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC20_S2Kapprove_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MockERC20_S2KbalanceOf_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kdecimals" "(" ")" [symbol(), klabel(method_MockERC20_S2Kdecimals_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kinitialize" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint8" ")" [symbol(), klabel(method_MockERC20_S2Kinitialize_string_string_uint8)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kname" "(" ")" [symbol(), klabel(method_MockERC20_S2Kname_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Knonces" "(" Int ":" "address" ")" [symbol(), klabel(method_MockERC20_S2Knonces_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Kpermit" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint8" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_MockERC20_S2Kpermit_address_address_uint256_uint256_uint8_bytes32_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_MockERC20_S2Ksymbol_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KtotalSupply" "(" ")" [symbol(), klabel(method_MockERC20_S2KtotalSupply_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2Ktransfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC20_S2Ktransfer_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC20_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KDOMAINZUndSEPARATOR ( ) => #abiCallData ( "DOMAIN_SEPARATOR" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kallowance ( V0_ : address , V1_ : address ) => #abiCallData ( "allowance" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kapprove ( V0_spender : address , V1_amount : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KbalanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kdecimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kinitialize ( V0__name : string , V1__symbol : string , V2__decimals : uint8 ) => #abiCallData ( "initialize" , #string ( V0__name ) , #string ( V1__symbol ) , #uint8 ( V2__decimals ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V2__decimals )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Knonces ( V0_ : address ) => #abiCallData ( "nonces" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Kpermit ( V0_owner : address , V1_spender : address , V2_value : uint256 , V3_deadline : uint256 , V4_v : uint8 , V5_r : bytes32 , V6_s : bytes32 ) => #abiCallData ( "permit" , #address ( V0_owner ) , #address ( V1_spender ) , #uint256 ( V2_value ) , #uint256 ( V3_deadline ) , #uint8 ( V4_v ) , #bytes32 ( V5_r ) , #bytes32 ( V6_s ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_owner )
       andBool ( #rangeAddress ( V1_spender )
       andBool ( #rangeUInt ( 256 , V2_value )
       andBool ( #rangeUInt ( 256 , V3_deadline )
       andBool ( #rangeUInt ( 8 , V4_v )
       andBool ( #rangeBytes ( 32 , V5_r )
       andBool ( #rangeBytes ( 32 , V6_s )
               )))))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KtotalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2Ktransfer ( V0_to : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_to ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC20 . S2KtransferFrom ( V0_from : address , V1_to : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "DOMAIN_SEPARATOR()" ) => 910484757 )
      
    
    rule  ( selector ( "allowance(address,address)" ) => 3714247998 )
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "initialize(string,string,uint8)" ) => 371521222 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "nonces(address)" ) => 2127478272 )
      
    
    rule  ( selector ( "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)" ) => 3573918927 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver" [symbol(), klabel(contract_lib%forge-std%src%mocks%IERC721TokenReceiver)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverContract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverMethod [function(), symbol(), klabel(method_lib%forge-std%src%mocks%IERC721TokenReceiver)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiverMethod ::= "S2KonERC721Received" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_IERC721TokenReceiver_S2KonERC721Received_address_address_uint256_bytes)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModIERC721TokenReceiver . S2KonERC721Received ( V0_ : address , V1_ : address , V2_ : uint256 , V3_ : bytes ) => #abiCallData ( "onERC721Received" , #address ( V0_ ) , #address ( V1_ ) , #uint256 ( V2_ ) , #bytes ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
       andBool ( #rangeUInt ( 256 , V2_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_ ) )
               ))))
      
    
    rule  ( selector ( "onERC721Received(address,address,uint256,bytes)" ) => 353073666 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract ::= "S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721" [symbol(), klabel(contract_lib%forge-std%src%mocks%MockERC721)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101f7578063b88d4fde1461020a578063c87b56dd1461021d578063e985e9c51461023157600080fd5b80636352211e146101bb57806370a08231146101ce57806395d89b41146101ef57600080fd5b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018257806342842e0e146101955780634cd88b76146101a857600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd3660046109aa565b61025f565b60405190151581526020015b60405180910390f35b61011f6102b1565b60405161010e9190610a14565b61015561013a366004610a27565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018061017b366004610a57565b61033f565b005b610180610190366004610a81565b610426565b6101806101a3366004610a81565b61061f565b6101806101b6366004610b69565b61070e565b6101556101c9366004610a27565b610782565b6101e16101dc366004610bcd565b6107d9565b60405190815260200161010e565b61011f61083c565b610180610205366004610be8565b610849565b610180610218366004610c24565b6108b5565b61011f61022b366004610a27565b50606090565b61010261023f366004610ca0565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061029057506380ac58cd60e01b6001600160e01b03198316145b806102ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546102be90610cd3565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea90610cd3565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061038857506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6103ca5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b0384811691161461047c5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016103c1565b6001600160a01b0382166104c65760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b60448201526064016103c1565b336001600160a01b038416148061050057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061052157506000818152600460205260409020546001600160a01b031633145b61055e5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016103c1565b6001600160a01b038316600090815260036020526040812080549161058283610d23565b90915550506001600160a01b03821660009081526003602052604081208054916105ab83610d3a565b9091555050600081815260026020908152604080832080546001600160a01b038088166001600160a01b031992831681179093556004909452828520805490911690559051849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61062a838383610426565b813b15806106ca5750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610d53565b6001600160e01b031916145b6107095760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b505050565b60065460ff16156107575760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064016103c1565b60006107638382610dbe565b5060016107708282610dbe565b50506006805460ff1916600117905550565b6000818152600260205260409020546001600160a01b0316806107d45760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016103c1565b919050565b60006001600160a01b0382166108205760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016103c1565b506001600160a01b031660009081526003602052604090205490565b600180546102be90610cd3565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108c0848484610426565b823b158061094c5750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a02906108fd903390899088908890600401610e7e565b6020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190610d53565b6001600160e01b031916145b61098b5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b50505050565b6001600160e01b0319811681146109a757600080fd5b50565b6000602082840312156109bc57600080fd5b81356109c781610991565b9392505050565b6000815180845260005b818110156109f4576020818501810151868301820152016109d8565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006109c760208301846109ce565b600060208284031215610a3957600080fd5b5035919050565b80356001600160a01b03811681146107d457600080fd5b60008060408385031215610a6a57600080fd5b610a7383610a40565b946020939093013593505050565b600080600060608486031215610a9657600080fd5b610a9f84610a40565b9250610aad60208501610a40565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610aee57610aee610abd565b604051601f8501601f19908116603f01168101908282118183101715610b1657610b16610abd565b81604052809350858152868686011115610b2f57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610b5a57600080fd5b6109c783833560208501610ad3565b60008060408385031215610b7c57600080fd5b823567ffffffffffffffff80821115610b9457600080fd5b610ba086838701610b49565b93506020850135915080821115610bb657600080fd5b50610bc385828601610b49565b9150509250929050565b600060208284031215610bdf57600080fd5b6109c782610a40565b60008060408385031215610bfb57600080fd5b610c0483610a40565b915060208301358015158114610c1957600080fd5b809150509250929050565b60008060008060808587031215610c3a57600080fd5b610c4385610a40565b9350610c5160208601610a40565b925060408501359150606085013567ffffffffffffffff811115610c7457600080fd5b8501601f81018713610c8557600080fd5b610c9487823560208401610ad3565b91505092959194509250565b60008060408385031215610cb357600080fd5b610cbc83610a40565b9150610cca60208401610a40565b90509250929050565b600181811c90821680610ce757607f821691505b602082108103610d0757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610d3257610d32610d0d565b506000190190565b600060018201610d4c57610d4c610d0d565b5060010190565b600060208284031215610d6557600080fd5b81516109c781610991565b601f82111561070957600081815260208120601f850160051c81016020861015610d975750805b601f850160051c820191505b81811015610db657828155600101610da3565b505050505050565b815167ffffffffffffffff811115610dd857610dd8610abd565b610dec81610de68454610cd3565b84610d70565b602080601f831160018114610e215760008415610e095750858301515b600019600386901b1c1916600185901b178555610db6565b600085815260208120601f198616915b82811015610e5057888601518255948401946001909101908401610e31565b5085821015610e6e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610eb1908301846109ce565b969550505050505056fea2646970667358221220ea30bfe69f42308a4e4b6fde7ecc4dc92e5f3939032794163301578a5850f09964736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50610ef1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101f7578063b88d4fde1461020a578063c87b56dd1461021d578063e985e9c51461023157600080fd5b80636352211e146101bb57806370a08231146101ce57806395d89b41146101ef57600080fd5b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018257806342842e0e146101955780634cd88b76146101a857600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd3660046109aa565b61025f565b60405190151581526020015b60405180910390f35b61011f6102b1565b60405161010e9190610a14565b61015561013a366004610a27565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b61018061017b366004610a57565b61033f565b005b610180610190366004610a81565b610426565b6101806101a3366004610a81565b61061f565b6101806101b6366004610b69565b61070e565b6101556101c9366004610a27565b610782565b6101e16101dc366004610bcd565b6107d9565b60405190815260200161010e565b61011f61083c565b610180610205366004610be8565b610849565b610180610218366004610c24565b6108b5565b61011f61022b366004610a27565b50606090565b61010261023f366004610ca0565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b03198316148061029057506380ac58cd60e01b6001600160e01b03198316145b806102ab5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546102be90610cd3565b80601f01602080910402602001604051908101604052809291908181526020018280546102ea90610cd3565b80156103375780601f1061030c57610100808354040283529160200191610337565b820191906000526020600020905b81548152906001019060200180831161031a57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061038857506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6103ca5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000818152600260205260409020546001600160a01b0384811691161461047c5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b60448201526064016103c1565b6001600160a01b0382166104c65760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b60448201526064016103c1565b336001600160a01b038416148061050057506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061052157506000818152600460205260409020546001600160a01b031633145b61055e5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016103c1565b6001600160a01b038316600090815260036020526040812080549161058283610d23565b90915550506001600160a01b03821660009081526003602052604081208054916105ab83610d3a565b9091555050600081815260026020908152604080832080546001600160a01b038088166001600160a01b031992831681179093556004909452828520805490911690559051849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61062a838383610426565b813b15806106ca5750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610d53565b6001600160e01b031916145b6107095760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b505050565b60065460ff16156107575760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064016103c1565b60006107638382610dbe565b5060016107708282610dbe565b50506006805460ff1916600117905550565b6000818152600260205260409020546001600160a01b0316806107d45760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016103c1565b919050565b60006001600160a01b0382166108205760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064016103c1565b506001600160a01b031660009081526003602052604090205490565b600180546102be90610cd3565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108c0848484610426565b823b158061094c5750604051630a85bd0160e11b808252906001600160a01b0385169063150b7a02906108fd903390899088908890600401610e7e565b6020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109409190610d53565b6001600160e01b031916145b61098b5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016103c1565b50505050565b6001600160e01b0319811681146109a757600080fd5b50565b6000602082840312156109bc57600080fd5b81356109c781610991565b9392505050565b6000815180845260005b818110156109f4576020818501810151868301820152016109d8565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006109c760208301846109ce565b600060208284031215610a3957600080fd5b5035919050565b80356001600160a01b03811681146107d457600080fd5b60008060408385031215610a6a57600080fd5b610a7383610a40565b946020939093013593505050565b600080600060608486031215610a9657600080fd5b610a9f84610a40565b9250610aad60208501610a40565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610aee57610aee610abd565b604051601f8501601f19908116603f01168101908282118183101715610b1657610b16610abd565b81604052809350858152868686011115610b2f57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610b5a57600080fd5b6109c783833560208501610ad3565b60008060408385031215610b7c57600080fd5b823567ffffffffffffffff80821115610b9457600080fd5b610ba086838701610b49565b93506020850135915080821115610bb657600080fd5b50610bc385828601610b49565b9150509250929050565b600060208284031215610bdf57600080fd5b6109c782610a40565b60008060408385031215610bfb57600080fd5b610c0483610a40565b915060208301358015158114610c1957600080fd5b809150509250929050565b60008060008060808587031215610c3a57600080fd5b610c4385610a40565b9350610c5160208601610a40565b925060408501359150606085013567ffffffffffffffff811115610c7457600080fd5b8501601f81018713610c8557600080fd5b610c9487823560208401610ad3565b91505092959194509250565b60008060408385031215610cb357600080fd5b610cbc83610a40565b9150610cca60208401610a40565b90509250929050565b600181811c90821680610ce757607f821691505b602082108103610d0757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081610d3257610d32610d0d565b506000190190565b600060018201610d4c57610d4c610d0d565b5060010190565b600060208284031215610d6557600080fd5b81516109c781610991565b601f82111561070957600081815260208120601f850160051c81016020861015610d975750805b601f850160051c820191505b81811015610db657828155600101610da3565b505050505050565b815167ffffffffffffffff811115610dd857610dd8610abd565b610dec81610de68454610cd3565b84610d70565b602080601f831160018114610e215760008415610e095750858301515b600019600386901b1c1916600185901b178555610db6565b600085815260208120601f198616915b82811015610e5057888601518255948401946001909101908401610e31565b5085821015610e6e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610eb1908301846109ce565b969550505050505056fea2646970667358221220ea30bfe69f42308a4e4b6fde7ecc4dc92e5f3939032794163301578a5850f09964736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Contract "." S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method [function(), symbol(), klabel(method_lib%forge-std%src%mocks%MockERC721)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kapprove" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2Kapprove_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KbalanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MockERC721_S2KbalanceOf_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KgetApproved" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2KgetApproved_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kinitialize" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_MockERC721_S2Kinitialize_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KisApprovedForAll" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_MockERC721_S2KisApprovedForAll_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Kname" "(" ")" [symbol(), klabel(method_MockERC721_S2Kname_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KownerOf" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2KownerOf_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2KsafeTransferFrom_address_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsafeTransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_MockERC721_S2KsafeTransferFrom_address_address_uint256_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsetApprovalForAll" "(" Int ":" "address" "," Int ":" "bool" ")" [symbol(), klabel(method_MockERC721_S2KsetApprovalForAll_address_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KsupportsInterface" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_MockERC721_S2KsupportsInterface_bytes4)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2Ksymbol" "(" ")" [symbol(), klabel(method_MockERC721_S2Ksymbol_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KtokenURI" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2KtokenURI_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721Method ::= "S2KtransferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MockERC721_S2KtransferFrom_address_address_uint256)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kapprove ( V0_spender : address , V1_id : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_id )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KbalanceOf ( V0_owner : address ) => #abiCallData ( "balanceOf" , #address ( V0_owner ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_owner )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KgetApproved ( V0_ : uint256 ) => #abiCallData ( "getApproved" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kinitialize ( V0__name : string , V1__symbol : string ) => #abiCallData ( "initialize" , #string ( V0__name ) , #string ( V1__symbol ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KisApprovedForAll ( V0_ : address , V1_ : address ) => #abiCallData ( "isApprovedForAll" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Kname ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KownerOf ( V0_id : uint256 ) => #abiCallData ( "ownerOf" , #uint256 ( V0_id ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_id )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsafeTransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 , V3_data : bytes ) => #abiCallData ( "safeTransferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsetApprovalForAll ( V0_operator : address , V1_approved : bool ) => #abiCallData ( "setApprovalForAll" , #address ( V0_operator ) , #bool ( V1_approved ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_operator )
       andBool ( #rangeBool ( V1_approved )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KsupportsInterface ( V0_interfaceId : bytes4 ) => #abiCallData ( "supportsInterface" , #bytes4 ( V0_interfaceId ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_interfaceId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2Ksymbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KtokenURI ( V0_id : uint256 ) => #abiCallData ( "tokenURI" , #uint256 ( V0_id ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_id )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModmocksZModMockERC721 . S2KtransferFrom ( V0_from : address , V1_to : address , V2_id : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_id ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_id )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "getApproved(uint256)" ) => 135795452 )
      
    
    rule  ( selector ( "initialize(string,string)" ) => 1289259894 )
      
    
    rule  ( selector ( "isApprovedForAll(address,address)" ) => 3917867461 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "ownerOf(uint256)" ) => 1666326814 )
      
    
    rule  ( selector ( "safeTransferFrom(address,address,uint256)" ) => 1115958798 )
      
    
    rule  ( selector ( "safeTransferFrom(address,address,uint256,bytes)" ) => 3096268766 )
      
    
    rule  ( selector ( "setApprovalForAll(address,bool)" ) => 2720838757 )
      
    
    rule  ( selector ( "supportsInterface(bytes4)" ) => 33540519 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "tokenURI(uint256)" ) => 3363526365 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModScript-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModScriptContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModScriptContract ::= "S2KlibZModforgeZSubstdZModsrcZModScript" [symbol(), klabel(contract_lib%forge-std%src%Script)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModScript ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModScript ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModScriptContract "." S2KlibZModforgeZSubstdZModsrcZModScriptMethod [function(), symbol(), klabel(method_lib%forge-std%src%Script)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModScriptMethod ::= "S2KISZUndSCRIPT" "(" ")" [symbol(), klabel(method_Script_S2KISZUndSCRIPT_)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModScript . S2KISZUndSCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdAssertions-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdAssertions" [symbol(), klabel(contract_lib%forge-std%src%StdAssertions)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdAssertionsContract "." S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod [function(), symbol(), klabel(method_lib%forge-std%src%StdAssertions)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_StdAssertions_S2KISZUndTEST_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdAssertionsMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_StdAssertions_S2Kfailed_)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdAssertions . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdChains-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdChainsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdChainsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdChains" [symbol(), klabel(contract_lib%forge-std%src%StdChains)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdChains ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdChains ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheats" [symbol(), klabel(contract_lib%forge-std%src%StdCheats)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdCheats ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdCheats ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe" [symbol(), klabel(contract_lib%forge-std%src%StdCheatsSafe)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdCheatsSafe ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdError" [symbol(), klabel(contract_lib%forge-std%src%stdError)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdError ) => #parseByteStack ( "0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b600060208083528351808285015260005b818110156101f8578581018301518582016040015282016101dc565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220389c2a344212be64b3f9f0bb8e6a9382943baf4eb20b5ca6323e02163c4213ca64736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdError ) => #parseByteStack ( "0x61024f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b600060208083528351808285015260005b818110156101f8578581018301518582016040015282016101dc565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220389c2a344212be64b3f9f0bb8e6a9382943baf4eb20b5ca6323e02163c4213ca64736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModstdErrorContract "." S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod [function(), symbol(), klabel(method_lib%forge-std%src%stdError)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KarithmeticError" "(" ")" [symbol(), klabel(method_stdError_S2KarithmeticError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KassertionError" "(" ")" [symbol(), klabel(method_stdError_S2KassertionError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KdivisionError" "(" ")" [symbol(), klabel(method_stdError_S2KdivisionError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KencodeStorageError" "(" ")" [symbol(), klabel(method_stdError_S2KencodeStorageError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KenumConversionError" "(" ")" [symbol(), klabel(method_stdError_S2KenumConversionError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KindexOOBError" "(" ")" [symbol(), klabel(method_stdError_S2KindexOOBError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KmemOverflowError" "(" ")" [symbol(), klabel(method_stdError_S2KmemOverflowError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KpopError" "(" ")" [symbol(), klabel(method_stdError_S2KpopError_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdErrorMethod ::= "S2KzeroVarError" "(" ")" [symbol(), klabel(method_stdError_S2KzeroVarError_)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KarithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KassertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KdivisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KencodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KenumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KindexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KmemOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KpopError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModstdError . S2KzeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdInvariant-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdInvariant" [symbol(), klabel(contract_lib%forge-std%src%StdInvariant)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModStdInvariantContract "." S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod [function(), symbol(), klabel(method_lib%forge-std%src%StdInvariant)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeArtifacts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeContracts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_StdInvariant_S2KexcludeSenders_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetArtifactSelectors_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetArtifacts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetContracts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetInterfaces_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetSelectors_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdInvariantMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_StdInvariant_S2KtargetSenders_)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModStdInvariant . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetInterfaces()" ) => 719206528 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdJson-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdJsonContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdJsonContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdJson" [symbol(), klabel(contract_lib%forge-std%src%stdJson)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdJson ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201ce7d1260fa848bafb76b3bd654c0080aee5ea18f658d172718be69cd1d2a54964736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdJson ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201ce7d1260fa848bafb76b3bd654c0080aee5ea18f658d172718be69cd1d2a54964736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdMathContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdMathContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdMath" [symbol(), klabel(contract_lib%forge-std%src%stdMath)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdMath ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026f80656146e3702558b49905a64abcf2acf7952752ec0fad7a950c1e4b96ef864736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdMath ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122026f80656146e3702558b49905a64abcf2acf7952752ec0fad7a950c1e4b96ef864736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorage" [symbol(), klabel(contract_lib%forge-std%src%stdStorage)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdStorage ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d8da17737c9bea88fc05b1333ad9bebfa9db6f1a349adfdbe21a7194ed1b3464736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdStorage ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122045d8da17737c9bea88fc05b1333ad9bebfa9db6f1a349adfdbe21a7194ed1b3464736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModstdStorageSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe" [symbol(), klabel(contract_lib%forge-std%src%stdStorageSafe)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f8bdc3a16653cc46ee90eb797368b21f305dc01d45d55561476e29ad8f9f292564736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModstdStorageSafe ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f8bdc3a16653cc46ee90eb797368b21f305dc01d45d55561476e29ad8f9f292564736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdStyle-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdStyleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdStyleContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdStyle" [symbol(), klabel(contract_lib%forge-std%src%StdStyle)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdStyle ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c90d12353fc24d3a9d5a98e0e7b501d9cf3de3d963602bde847d76ef6349a7664736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdStyle ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206c90d12353fc24d3a9d5a98e0e7b501d9cf3de3d963602bde847d76ef6349a7664736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModStdUtils-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModStdUtilsContract ::= "S2KlibZModforgeZSubstdZModsrcZModStdUtils" [symbol(), klabel(contract_lib%forge-std%src%StdUtils)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModStdUtils ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModStdUtils ) => #parseByteStack ( "0x" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModVm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmContract ::= "S2KlibZModforgeZSubstdZModsrcZModVm" [symbol(), klabel(contract_lib%forge-std%src%Vm)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModVm ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModVm ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmContract "." S2KlibZModforgeZSubstdZModsrcZModVmMethod [function(), symbol(), klabel(method_lib%forge-std%src%Vm)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kaccesses_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KactiveFork" "(" ")" [symbol(), klabel(method_Vm_S2KactiveFork_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kaddr_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KallowCheatcodes" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KallowCheatcodes_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kassume_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2Kbreakpoint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kbreakpoint_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kbroadcast_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KchainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KchainId_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KclearMockedCalls" "(" ")" [symbol(), klabel(method_Vm_S2KclearMockedCalls_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcloseFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kcoinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kcoinbase_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KcomputeCreate2Address_bytes32_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KcomputeCreate2Address_bytes32_bytes32_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcomputeCreateAddress" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcomputeCreateAddress_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcopyFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcopyFile_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KcreateDir_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateFork_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateSelectFork_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateWallet_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KcreateWallet_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KcreateWallet_uint256_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdeal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdeal_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_string_uint32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_S2KderiveKey_string_uint32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kdifficulty" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kdifficulty_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvAddress_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBool_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvBytes32_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvInt_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bool[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_bytes[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_int256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_string_uint256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KenvOr_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvString_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KenvUint_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ketch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2Ketch_address_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KethZUndgetLogs" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "address" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_Vm_S2KethZUndgetLogs_uint256_uint256_address_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kexists" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2Kexists_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_bytes_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_bytes_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_uint64_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCall_address_uint256_uint64_bytes_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectCallMinGas" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint64" "," Bytes ":" "bytes" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectCallMinGas_address_uint256_uint64_bytes_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KexpectEmit_bool_bool_bool_bool_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_Vm_S2KexpectRevert_bytes4)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemory" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectSafeMemory_uint64_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KexpectSafeMemoryCall" "(" Int ":" "uint64" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KexpectSafeMemoryCall_uint64_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kfee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kfee_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2Kffi_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KfsMetadata_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetCode_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KgetDeployedCode_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetLabel_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingKeyAndParentOf" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KgetMappingKeyAndParentOf_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingLength" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KgetMappingLength_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetMappingSlotAt" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KgetMappingSlotAt_address_bytes32_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetNonce" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KgetNonce_address_uint256_uint256_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KgetNonce_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_Vm_S2KgetRecordedLogs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisDir" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KisDir_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KisFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KisPersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KisPersistent_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KkeyExists" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KkeyExists_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2Klabel_address_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kload_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KloadAllocs" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KloadAllocs_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmakePersistent" "(" K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KmakePersistent_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_bytes_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCall_address_uint256_bytes_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCallRevert_address_bytes_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KmockCallRevert" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KmockCallRevert_address_uint256_bytes_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseAddress_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBool_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBytes_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseBytes32_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseInt_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJson_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonAddress_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonAddressArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBool_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBoolArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes32_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytes32Array_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonBytesArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonInt_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonIntArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonKeys" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonKeys_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonString_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonStringArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonUint_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseJsonUintArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KparseUint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_Vm_S2KpauseGasMetering_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2Kprank_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kprevrandao" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kprevrandao_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_Vm_S2KprojectRoot_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadCallers" "(" ")" [symbol(), klabel(method_Vm_S2KreadCallers_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadDir_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KreadDir_string_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KreadDir_string_uint64_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadFileBinary_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLine_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KreadLink_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_Vm_S2Krecord_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_Vm_S2KrecordLogs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrememberKey_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KremoveDir_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KremoveFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KresetNonce_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_Vm_S2KresumeGasMetering_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrevertTo_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KrevokePersistent_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrevokePersistent" "(" K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KrevokePersistent_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kroll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kroll_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KrollFork_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KrollFork_uint256_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Krpc" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2Krpc_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_S2KrpcUrl_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrlStructs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_Vm_S2KrpcUrls_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KselectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KselectFork_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KserializeAddress_string_string_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_Vm_S2KserializeAddress_string_string_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KserializeBool_string_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_Vm_S2KserializeBool_string_string_bool[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KserializeBytes_string_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_Vm_S2KserializeBytes_string_string_bytes[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KserializeBytes32_string_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_Vm_S2KserializeBytes32_string_string_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KserializeInt_string_string_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_Vm_S2KserializeInt_string_string_int256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KserializeJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KserializeString_string_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2KserializeString_string_string_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KserializeUint_string_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_Vm_S2KserializeUint_string_string_uint256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KsetEnv_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonce_address_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KsetNonceUnsafe" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_S2KsetNonceUnsafe_address_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksign" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ksign_address_uint256_uint256_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ksign_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kskip" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2Kskip_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksleep" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Ksleep_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ksnapshot" "(" ")" [symbol(), klabel(method_Vm_S2Ksnapshot_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KstartBroadcast_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartMappingRecording" "(" ")" [symbol(), klabel(method_Vm_S2KstartMappingRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KstartPrank_address_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstartStateDiffRecording" "(" ")" [symbol(), klabel(method_Vm_S2KstartStateDiffRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopAndReturnStateDiff" "(" ")" [symbol(), klabel(method_Vm_S2KstopAndReturnStateDiff_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_Vm_S2KstopBroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopMappingRecording" "(" ")" [symbol(), klabel(method_Vm_S2KstopMappingRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KstopPrank" "(" ")" [symbol(), klabel(method_Vm_S2KstopPrank_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kstore" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Kstore_address_bytes32_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_S2KtoString_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_S2KtoString_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2KtoString_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_Vm_S2KtoString_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtoString_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ktransact_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Ktransact" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_S2Ktransact_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtryFfi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_S2KtryFfi_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KtxGasPrice" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2KtxGasPrice_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KunixTime" "(" ")" [symbol(), klabel(method_Vm_S2KunixTime_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2Kwarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_S2Kwarp_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteFile_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_S2KwriteFileBinary_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteJson_string_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_S2KwriteLine_string_string)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KactiveFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KallowCheatcodes ( V0_account : address ) => #abiCallData ( "allowCheatcodes" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KchainId ( V0_newChainId : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KclearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kcoinbase ( V0_newCoinbase : address ) => #abiCallData ( "coinbase" , #address ( V0_newCoinbase ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_newCoinbase )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 , V2_deployer : address ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , #address ( V2_deployer ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
       andBool ( #rangeAddress ( V2_deployer )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcomputeCreateAddress ( V0_deployer : address , V1_nonce : uint256 ) => #abiCallData ( "computeCreateAddress" , #address ( V0_deployer ) , #uint256 ( V1_nonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_deployer )
       andBool ( #rangeUInt ( 256 , V1_nonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcopyFile ( V0_from : string , V1_to : string ) => #abiCallData ( "copyFile" , #string ( V0_from ) , #string ( V1_to ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_txHash : bytes32 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateSelectFork ( V0_urlOrAlias : string , V1_blockNumber : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_urlOrAlias ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_walletLabel : string ) => #abiCallData ( "createWallet" , #string ( V0_walletLabel ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_privateKey : uint256 ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KcreateWallet ( V0_privateKey : uint256 , V1_walletLabel : string ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , #string ( V1_walletLabel ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdeal ( V0_account : address , V1_newBalance : uint256 ) => #abiCallData ( "deal" , #address ( V0_account ) , #uint256 ( V1_newBalance ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 256 , V1_newBalance )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kdifficulty ( V0_newDifficulty : uint256 ) => #abiCallData ( "difficulty" , #uint256 ( V0_newDifficulty ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newDifficulty )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ketch ( V0_target : address , V1_newRuntimeBytecode : bytes ) => #abiCallData ( "etch" , #address ( V0_target ) , #bytes ( V1_newRuntimeBytecode ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_newRuntimeBytecode ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kexists ( V0_path : string ) => #abiCallData ( "exists" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_data : bytes , V2_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #uint64 ( V2_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 64 , V2_count )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #uint64 ( V3_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 64 , V3_count )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCall ( V0_callee : address , V1_msgValue : uint256 , V2_gas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_gas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_gas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectCallMinGas ( V0_callee : address , V1_msgValue : uint256 , V2_minGas : uint64 , V3_data : bytes , V4_count : uint64 ) => #abiCallData ( "expectCallMinGas" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #uint64 ( V2_minGas ) , #bytes ( V3_data ) , #uint64 ( V4_count ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 64 , V2_minGas )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_data ) )
       andBool ( #rangeUInt ( 64 , V4_count )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( ) => #abiCallData ( "expectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_emitter : address ) => #abiCallData ( "expectEmit" , #address ( V0_emitter ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_emitter )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectEmit ( V0_checkTopic1 : bool , V1_checkTopic2 : bool , V2_checkTopic3 : bool , V3_checkData : bool , V4_emitter : address ) => #abiCallData ( "expectEmit" , #bool ( V0_checkTopic1 ) , #bool ( V1_checkTopic2 ) , #bool ( V2_checkTopic3 ) , #bool ( V3_checkData ) , #address ( V4_emitter ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_checkTopic1 )
       andBool ( #rangeBool ( V1_checkTopic2 )
       andBool ( #rangeBool ( V2_checkTopic3 )
       andBool ( #rangeBool ( V3_checkData )
       andBool ( #rangeAddress ( V4_emitter )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_revertData ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectRevert ( V0_revertData : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_revertData ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_revertData )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemory ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemory" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KexpectSafeMemoryCall ( V0_min : uint64 , V1_max : uint64 ) => #abiCallData ( "expectSafeMemoryCall" , #uint64 ( V0_min ) , #uint64 ( V1_max ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V0_min )
       andBool ( #rangeUInt ( 64 , V1_max )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kfee ( V0_newBasefee : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_newBasefee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newBasefee )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingKeyAndParentOf ( V0_target : address , V1_elementSlot : bytes32 ) => #abiCallData ( "getMappingKeyAndParentOf" , #address ( V0_target ) , #bytes32 ( V1_elementSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_elementSlot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingLength ( V0_target : address , V1_mappingSlot : bytes32 ) => #abiCallData ( "getMappingLength" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetMappingSlotAt ( V0_target : address , V1_mappingSlot : bytes32 , V2_idx : uint256 ) => #abiCallData ( "getMappingSlotAt" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , #uint256 ( V2_idx ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
       andBool ( #rangeUInt ( 256 , V2_idx )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetNonce ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 ) => #abiCallData ( "getNonce" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisDir ( V0_path : string ) => #abiCallData ( "isDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisFile ( V0_path : string ) => #abiCallData ( "isFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KisPersistent ( V0_account : address ) => #abiCallData ( "isPersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KkeyExists ( V0_json : string , V1_key : string ) => #abiCallData ( "keyExists" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KloadAllocs ( V0_pathToAllocsJson : string ) => #abiCallData ( "loadAllocs" , #string ( V0_pathToAllocsJson ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account : address ) => #abiCallData ( "makePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmakePersistent ( V0_account0 : address , V1_account1 : address , V2_account2 : address ) => #abiCallData ( "makePersistent" , #address ( V0_account0 ) , #address ( V1_account1 ) , #address ( V2_account2 ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account0 )
       andBool ( #rangeAddress ( V1_account1 )
       andBool ( #rangeAddress ( V2_account2 )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_data : bytes , V2_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_returnData ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCall ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_returnData : bytes ) => #abiCallData ( "mockCall" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_returnData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_returnData ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_data : bytes , V2_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #bytes ( V1_data ) , #bytes ( V2_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_revertData ) )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KmockCallRevert ( V0_callee : address , V1_msgValue : uint256 , V2_data : bytes , V3_revertData : bytes ) => #abiCallData ( "mockCallRevert" , #address ( V0_callee ) , #uint256 ( V1_msgValue ) , #bytes ( V2_data ) , #bytes ( V3_revertData ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_callee )
       andBool ( #rangeUInt ( 256 , V1_msgValue )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_data ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_revertData ) )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddress ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonAddressArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBool ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBoolArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32 ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytes32Array ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonBytesArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonInt ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonIntArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonKeys ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonKeys" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonString ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonString" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonStringArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUint ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseJsonUintArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "prank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kprevrandao ( V0_newPrevrandao : bytes32 ) => #abiCallData ( "prevrandao" , #bytes32 ( V0_newPrevrandao ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_newPrevrandao )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadCallers ( ) => #abiCallData ( "readCallers" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresetNonce ( V0_account : address ) => #abiCallData ( "resetNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevertTo ( V0_snapshotId : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_snapshotId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_snapshotId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrevokePersistent ( V0_account : address ) => #abiCallData ( "revokePersistent" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kroll ( V0_newHeight : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_txHash : bytes32 ) => #abiCallData ( "rollFork" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_blockNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_blockNumber )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Krpc ( V0_method : string , V1_params : string ) => #abiCallData ( "rpc" , #string ( V0_method ) , #string ( V1_params ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KselectFork ( V0_forkId : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_forkId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_forkId )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeJson ( V0_objectKey : string , V1_value : string ) => #abiCallData ( "serializeJson" , #string ( V0_objectKey ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonce ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KsetNonceUnsafe ( V0_account : address , V1_newNonce : uint64 ) => #abiCallData ( "setNonceUnsafe" , #address ( V0_account ) , #uint64 ( V1_newNonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_account )
       andBool ( #rangeUInt ( 64 , V1_newNonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksign ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 , V4_digest : bytes32 ) => #abiCallData ( "sign" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , #bytes32 ( V4_digest ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
       andBool ( #rangeBytes ( 32 , V4_digest )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kskip ( V0_skipTest : bool ) => #abiCallData ( "skip" , #bool ( V0_skipTest ) , .TypedArgs ) )
       ensures #rangeBool ( V0_skipTest )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksleep ( V0_duration : uint256 ) => #abiCallData ( "sleep" , #uint256 ( V0_duration ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_duration )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ksnapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartMappingRecording ( ) => #abiCallData ( "startMappingRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_msgSender )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartPrank ( V0_msgSender : address , V1_txOrigin : address ) => #abiCallData ( "startPrank" , #address ( V0_msgSender ) , #address ( V1_txOrigin ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_msgSender )
       andBool ( #rangeAddress ( V1_txOrigin )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstartStateDiffRecording ( ) => #abiCallData ( "startStateDiffRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopAndReturnStateDiff ( ) => #abiCallData ( "stopAndReturnStateDiff" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopMappingRecording ( ) => #abiCallData ( "stopMappingRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KstopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kstore ( V0_target : address , V1_slot : bytes32 , V2_value : bytes32 ) => #abiCallData ( "store" , #address ( V0_target ) , #bytes32 ( V1_slot ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
       andBool ( #rangeBytes ( 32 , V2_value )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_txHash : bytes32 ) => #abiCallData ( "transact" , #bytes32 ( V0_txHash ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_txHash )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Ktransact ( V0_forkId : uint256 , V1_txHash : bytes32 ) => #abiCallData ( "transact" , #uint256 ( V0_forkId ) , #bytes32 ( V1_txHash ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeBytes ( 32 , V1_txHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KtxGasPrice ( V0_newGasPrice : uint256 ) => #abiCallData ( "txGasPrice" , #uint256 ( V0_newGasPrice ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newGasPrice )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KunixTime ( ) => #abiCallData ( "unixTime" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2Kwarp ( V0_newTimestamp : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_newTimestamp ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newTimestamp )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVm . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "allowCheatcodes(address)" ) => 3926262417 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "computeCreate2Address(bytes32,bytes32)" ) => 2299275323 )
      
    
    rule  ( selector ( "computeCreate2Address(bytes32,bytes32,address)" ) => 3542319722 )
      
    
    rule  ( selector ( "computeCreateAddress(address,uint256)" ) => 1952676474 )
      
    
    rule  ( selector ( "copyFile(string,string)" ) => 2773125080 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,bytes32)" ) => 2091030146 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,bytes32)" ) => 2228562810 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "createWallet(string)" ) => 1946481106 )
      
    
    rule  ( selector ( "createWallet(uint256)" ) => 2053594038 )
      
    
    rule  ( selector ( "createWallet(uint256,string)" ) => 3984348258 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "difficulty(uint256)" ) => 1187812057 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "eth_getLogs(uint256,uint256,address,bytes32[])" ) => 903951515 )
      
    
    rule  ( selector ( "exists(string)" ) => 639251006 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,bytes,uint64)" ) => 3249388543 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes,uint64)" ) => 2729550254 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes)" ) => 590746119 )
      
    
    rule  ( selector ( "expectCall(address,uint256,uint64,bytes,uint64)" ) => 1706538956 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes)" ) => 149217558 )
      
    
    rule  ( selector ( "expectCallMinGas(address,uint256,uint64,bytes,uint64)" ) => 3778680884 )
      
    
    rule  ( selector ( "expectEmit()" ) => 1141821709 )
      
    
    rule  ( selector ( "expectEmit(address)" ) => 2260296205 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "expectSafeMemory(uint64,uint64)" ) => 1828808328 )
      
    
    rule  ( selector ( "expectSafeMemoryCall(uint64,uint64)" ) => 92507124 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getMappingKeyAndParentOf(address,bytes32)" ) => 2272142566 )
      
    
    rule  ( selector ( "getMappingLength(address,bytes32)" ) => 791664191 )
      
    
    rule  ( selector ( "getMappingSlotAt(address,bytes32,uint256)" ) => 3955702452 )
      
    
    rule  ( selector ( "getNonce((address,uint256,uint256,uint256))" ) => 2775878317 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "isDir(string)" ) => 2098581529 )
      
    
    rule  ( selector ( "isFile(string)" ) => 3773498580 )
      
    
    rule  ( selector ( "isPersistent(address)" ) => 3643641597 )
      
    
    rule  ( selector ( "keyExists(string,string)" ) => 1384802364 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "loadAllocs(string)" ) => 3013629655 )
      
    
    rule  ( selector ( "makePersistent(address)" ) => 1474440670 )
      
    
    rule  ( selector ( "makePersistent(address,address)" ) => 1081401512 )
      
    
    rule  ( selector ( "makePersistent(address,address,address)" ) => 4021779061 )
      
    
    rule  ( selector ( "makePersistent(address[])" ) => 496903838 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "mockCallRevert(address,bytes,bytes)" ) => 3685404999 )
      
    
    rule  ( selector ( "mockCallRevert(address,uint256,bytes,bytes)" ) => 3527200823 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonKeys(string,string)" ) => 557728152 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "prevrandao(bytes32)" ) => 999445833 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readCallers()" ) => 1255193289 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resetNonce(address)" ) => 477246573 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "revokePersistent(address)" ) => 2574909986 )
      
    
    rule  ( selector ( "revokePersistent(address[])" ) => 1021929958 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(bytes32)" ) => 254375723 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,bytes32)" ) => 4068675451 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpc(string,string)" ) => 302434472 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeJson(string,string)" ) => 2603833520 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "setNonceUnsafe(address,uint64)" ) => 2607264284 )
      
    
    rule  ( selector ( "sign((address,uint256,uint256,uint256),bytes32)" ) => 2992396837 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "skip(bool)" ) => 3716337982 )
      
    
    rule  ( selector ( "sleep(uint256)" ) => 4204627731 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "startMappingRecording()" ) => 1050084800 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "startStateDiffRecording()" ) => 3475170249 )
      
    
    rule  ( selector ( "stopAndReturnStateDiff()" ) => 2858219790 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopMappingRecording()" ) => 222998171 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "transact(bytes32)" ) => 3194252705 )
      
    
    rule  ( selector ( "transact(uint256,bytes32)" ) => 1300937803 )
      
    
    rule  ( selector ( "tryFfi(string[])" ) => 4099677415 )
      
    
    rule  ( selector ( "txGasPrice(uint256)" ) => 1224018959 )
      
    
    rule  ( selector ( "unixTime()" ) => 1649641436 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModVmSafe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeContract ::= "S2KlibZModforgeZSubstdZModsrcZModVmSafe" [symbol(), klabel(contract_lib%forge-std%src%VmSafe)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModVmSafe ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModVmSafe ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModVmSafeContract "." S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod [function(), symbol(), klabel(method_lib%forge-std%src%VmSafe)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaccesses" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2Kaccesses_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kaddr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2Kaddr_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kassume" "(" Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2Kassume_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Kbreakpoint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbreakpoint" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2Kbreakpoint_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kbroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2Kbroadcast_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcloseFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KcloseFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KcomputeCreate2Address_bytes32_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreate2Address" "(" Int ":" "bytes32" "," Int ":" "bytes32" "," Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KcomputeCreate2Address_bytes32_bytes32_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcomputeCreateAddress" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KcomputeCreateAddress_address_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcopyFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KcopyFile_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KcreateDir_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KcreateWallet_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KcreateWallet_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KcreateWallet" "(" Int ":" "uint256" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KcreateWallet_uint256_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_VmSafe_S2KderiveKey_string_string_uint32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KderiveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_VmSafe_S2KderiveKey_string_uint32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvAddress_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvAddress_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBool_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBool_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes32_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvBytes32_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvInt_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvInt_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bool[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_bytes[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_int256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_string_uint256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvOr" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KenvOr_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvString_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvString_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvUint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KenvUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KenvUint_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KethZUndgetLogs" "(" Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "address" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_VmSafe_S2KethZUndgetLogs_uint256_uint256_address_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kexists" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Kexists_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2Kffi_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KfsMetadata" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KfsMetadata_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetCode" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KgetCode_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetDeployedCode" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KgetDeployedCode_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetLabel" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KgetLabel_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingKeyAndParentOf" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KgetMappingKeyAndParentOf_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingLength" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KgetMappingLength_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetMappingSlotAt" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KgetMappingSlotAt_address_bytes32_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KgetNonce_address_uint256_uint256_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KgetNonce_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KgetRecordedLogs" "(" ")" [symbol(), klabel(method_VmSafe_S2KgetRecordedLogs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KisDir" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KisDir_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KisFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KisFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KkeyExists" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KkeyExists_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Klabel" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Klabel_address_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Kload" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2Kload_address_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseAddress" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseAddress_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBool" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBool_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBytes_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseBytes32_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseInt" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseInt_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJson_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonAddress_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonAddressArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonAddressArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBool_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBoolArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBoolArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes32_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytes32Array" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytes32Array_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonBytesArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonBytesArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonInt_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonIntArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonIntArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonKeys" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonKeys_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonString_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonStringArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonStringArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonUint_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseJsonUintArray" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseJsonUintArray_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KparseUint" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KparseUint_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KpauseGasMetering" "(" ")" [symbol(), klabel(method_VmSafe_S2KpauseGasMetering_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KprojectRoot" "(" ")" [symbol(), klabel(method_VmSafe_S2KprojectRoot_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string_uint64)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadDir" "(" String ":" "string" "," Int ":" "uint64" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KreadDir_string_uint64_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadFileBinary" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadFileBinary_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLine" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadLine_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KreadLink" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KreadLink_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Krecord" "(" ")" [symbol(), klabel(method_VmSafe_S2Krecord_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrecordLogs" "(" ")" [symbol(), klabel(method_VmSafe_S2KrecordLogs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrememberKey" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KrememberKey_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveDir" "(" String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KremoveDir_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KremoveFile" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KremoveFile_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KresumeGasMetering" "(" ")" [symbol(), klabel(method_VmSafe_S2KresumeGasMetering_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Krpc" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2Krpc_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrl_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrlStructs" "(" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrlStructs_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KrpcUrls" "(" ")" [symbol(), klabel(method_VmSafe_S2KrpcUrls_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KserializeAddress_string_string_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeAddress" "(" String ":" "string" "," String ":" "string" "," K ":" "address[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeAddress_string_string_address[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KserializeBool_string_string_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBool" "(" String ":" "string" "," String ":" "string" "," K ":" "bool[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBool_string_string_bool[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes_string_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes_string_string_bytes[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes32_string_string_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeBytes32" "(" String ":" "string" "," String ":" "string" "," K ":" "bytes32[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeBytes32_string_string_bytes32[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KserializeInt_string_string_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeInt" "(" String ":" "string" "," String ":" "string" "," K ":" "int256[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeInt_string_string_int256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KserializeJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KserializeString_string_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeString" "(" String ":" "string" "," String ":" "string" "," K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeString_string_string_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KserializeUint_string_string_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KserializeUint" "(" String ":" "string" "," String ":" "string" "," K ":" "uint256[]" ")" [symbol(), klabel(method_VmSafe_S2KserializeUint_string_string_uint256[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KsetEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KsetEnv_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksign" "(" Int ":" "address" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2Ksign_address_uint256_uint256_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2Ksign_uint256_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2Ksleep" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2Ksleep_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartBroadcast" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KstartBroadcast_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartMappingRecording" "(" ")" [symbol(), klabel(method_VmSafe_S2KstartMappingRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstartStateDiffRecording" "(" ")" [symbol(), klabel(method_VmSafe_S2KstartStateDiffRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopAndReturnStateDiff" "(" ")" [symbol(), klabel(method_VmSafe_S2KstopAndReturnStateDiff_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopBroadcast" "(" ")" [symbol(), klabel(method_VmSafe_S2KstopBroadcast_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KstopMappingRecording" "(" ")" [symbol(), klabel(method_VmSafe_S2KstopMappingRecording_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "address" ")" [symbol(), klabel(method_VmSafe_S2KtoString_address)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bool" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bool)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_VmSafe_S2KtoString_bytes32)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "int256" ")" [symbol(), klabel(method_VmSafe_S2KtoString_int256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtoString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_VmSafe_S2KtoString_uint256)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KtryFfi" "(" K ":" "string[]" ")" [symbol(), klabel(method_VmSafe_S2KtryFfi_string[])]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KunixTime" "(" ")" [symbol(), klabel(method_VmSafe_S2KunixTime_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteFile_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteFileBinary" "(" String ":" "string" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_VmSafe_S2KwriteFileBinary_string_bytes)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteJson_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteJson" "(" String ":" "string" "," String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteJson_string_string_string)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModVmSafeMethod ::= "S2KwriteLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_VmSafe_S2KwriteLine_string_string)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaccesses ( V0_target : address ) => #abiCallData ( "accesses" , #address ( V0_target ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_target )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kaddr ( V0_privateKey : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kassume ( V0_condition : bool ) => #abiCallData ( "assume" , #bool ( V0_condition ) , .TypedArgs ) )
       ensures #rangeBool ( V0_condition )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbreakpoint ( V0_char : string , V1_value : bool ) => #abiCallData ( "breakpoint" , #string ( V0_char ) , #bool ( V1_value ) , .TypedArgs ) )
       ensures #rangeBool ( V1_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_signer : address ) => #abiCallData ( "broadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kbroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "broadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcloseFile ( V0_path : string ) => #abiCallData ( "closeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreate2Address ( V0_salt : bytes32 , V1_initCodeHash : bytes32 , V2_deployer : address ) => #abiCallData ( "computeCreate2Address" , #bytes32 ( V0_salt ) , #bytes32 ( V1_initCodeHash ) , #address ( V2_deployer ) , .TypedArgs ) )
       ensures ( #rangeBytes ( 32 , V0_salt )
       andBool ( #rangeBytes ( 32 , V1_initCodeHash )
       andBool ( #rangeAddress ( V2_deployer )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcomputeCreateAddress ( V0_deployer : address , V1_nonce : uint256 ) => #abiCallData ( "computeCreateAddress" , #address ( V0_deployer ) , #uint256 ( V1_nonce ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_deployer )
       andBool ( #rangeUInt ( 256 , V1_nonce )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcopyFile ( V0_from : string , V1_to : string ) => #abiCallData ( "copyFile" , #string ( V0_from ) , #string ( V1_to ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "createDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_walletLabel : string ) => #abiCallData ( "createWallet" , #string ( V0_walletLabel ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_privateKey : uint256 ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KcreateWallet ( V0_privateKey : uint256 , V1_walletLabel : string ) => #abiCallData ( "createWallet" , #uint256 ( V0_privateKey ) , #string ( V1_walletLabel ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_derivationPath : string , V2_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #string ( V1_derivationPath ) , #uint32 ( V2_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KderiveKey ( V0_mnemonic : string , V1_index : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_mnemonic ) , #uint32 ( V1_index ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_index )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvAddress ( V0_name : string , V1_delim : string ) => #abiCallData ( "envAddress" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBool ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBool" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvBytes32 ( V0_name : string , V1_delim : string ) => #abiCallData ( "envBytes32" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvInt ( V0_name : string , V1_delim : string ) => #abiCallData ( "envInt" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : address ) => #abiCallData ( "envOr" , #string ( V0_name ) , #address ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeAddress ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bool ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bool ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBool ( V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_defaultValue ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : bytes32 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #bytes32 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : int256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #int256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : string ) => #abiCallData ( "envOr" , #string ( V0_name ) , #string ( V1_defaultValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvOr ( V0_name : string , V1_defaultValue : uint256 ) => #abiCallData ( "envOr" , #string ( V0_name ) , #uint256 ( V1_defaultValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_defaultValue )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string ) => #abiCallData ( "envString" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvString ( V0_name : string , V1_delim : string ) => #abiCallData ( "envString" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KenvUint ( V0_name : string , V1_delim : string ) => #abiCallData ( "envUint" , #string ( V0_name ) , #string ( V1_delim ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kexists ( V0_path : string ) => #abiCallData ( "exists" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KfsMetadata ( V0_path : string ) => #abiCallData ( "fsMetadata" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetCode ( V0_artifactPath : string ) => #abiCallData ( "getCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetDeployedCode ( V0_artifactPath : string ) => #abiCallData ( "getDeployedCode" , #string ( V0_artifactPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetLabel ( V0_account : address ) => #abiCallData ( "getLabel" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingKeyAndParentOf ( V0_target : address , V1_elementSlot : bytes32 ) => #abiCallData ( "getMappingKeyAndParentOf" , #address ( V0_target ) , #bytes32 ( V1_elementSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_elementSlot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingLength ( V0_target : address , V1_mappingSlot : bytes32 ) => #abiCallData ( "getMappingLength" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetMappingSlotAt ( V0_target : address , V1_mappingSlot : bytes32 , V2_idx : uint256 ) => #abiCallData ( "getMappingSlotAt" , #address ( V0_target ) , #bytes32 ( V1_mappingSlot ) , #uint256 ( V2_idx ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_mappingSlot )
       andBool ( #rangeUInt ( 256 , V2_idx )
               )))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetNonce ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 ) => #abiCallData ( "getNonce" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
               ))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetNonce ( V0_account : address ) => #abiCallData ( "getNonce" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KgetRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KisDir ( V0_path : string ) => #abiCallData ( "isDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KisFile ( V0_path : string ) => #abiCallData ( "isFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KkeyExists ( V0_json : string , V1_key : string ) => #abiCallData ( "keyExists" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Klabel ( V0_account : address , V1_newLabel : string ) => #abiCallData ( "label" , #address ( V0_account ) , #string ( V1_newLabel ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Kload ( V0_target : address , V1_slot : bytes32 ) => #abiCallData ( "load" , #address ( V0_target ) , #bytes32 ( V1_slot ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_target )
       andBool ( #rangeBytes ( 32 , V1_slot )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseAddress ( V0_stringifiedValue : string ) => #abiCallData ( "parseAddress" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBool ( V0_stringifiedValue : string ) => #abiCallData ( "parseBool" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseBytes32 ( V0_stringifiedValue : string ) => #abiCallData ( "parseBytes32" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseInt ( V0_stringifiedValue : string ) => #abiCallData ( "parseInt" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJson ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJson" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddress ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddress" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonAddressArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonAddressArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBool ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBool" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBoolArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBoolArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32 ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytes32Array ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytes32Array" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonBytesArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonBytesArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonInt ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonInt" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonIntArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonIntArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonKeys ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonKeys" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonString ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonString" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonStringArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonStringArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUint ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUint" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseJsonUintArray ( V0_json : string , V1_key : string ) => #abiCallData ( "parseJsonUintArray" , #string ( V0_json ) , #string ( V1_key ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KparseUint ( V0_stringifiedValue : string ) => #abiCallData ( "parseUint" , #string ( V0_stringifiedValue ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KpauseGasMetering ( ) => #abiCallData ( "pauseGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KprojectRoot ( ) => #abiCallData ( "projectRoot" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string ) => #abiCallData ( "readDir" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V1_maxDepth )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadDir ( V0_path : string , V1_maxDepth : uint64 , V2_followLinks : bool ) => #abiCallData ( "readDir" , #string ( V0_path ) , #uint64 ( V1_maxDepth ) , #bool ( V2_followLinks ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 64 , V1_maxDepth )
       andBool ( #rangeBool ( V2_followLinks )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFile ( V0_path : string ) => #abiCallData ( "readFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadFileBinary ( V0_path : string ) => #abiCallData ( "readFileBinary" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLine ( V0_path : string ) => #abiCallData ( "readLine" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KreadLink ( V0_linkPath : string ) => #abiCallData ( "readLink" , #string ( V0_linkPath ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Krecord ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrecordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrememberKey ( V0_privateKey : uint256 ) => #abiCallData ( "rememberKey" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveDir ( V0_path : string , V1_recursive : bool ) => #abiCallData ( "removeDir" , #string ( V0_path ) , #bool ( V1_recursive ) , .TypedArgs ) )
       ensures #rangeBool ( V1_recursive )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KremoveFile ( V0_path : string ) => #abiCallData ( "removeFile" , #string ( V0_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KresumeGasMetering ( ) => #abiCallData ( "resumeGasMetering" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Krpc ( V0_method : string , V1_params : string ) => #abiCallData ( "rpc" , #string ( V0_method ) , #string ( V1_params ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrl ( V0_rpcAlias : string ) => #abiCallData ( "rpcUrl" , #string ( V0_rpcAlias ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrlStructs ( ) => #abiCallData ( "rpcUrlStructs" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KrpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeAddress ( V0_objectKey : string , V1_valueKey : string , V2_value : address ) => #abiCallData ( "serializeAddress" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #address ( V2_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBool ( V0_objectKey : string , V1_valueKey : string , V2_value : bool ) => #abiCallData ( "serializeBool" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bool ( V2_value ) , .TypedArgs ) )
       ensures #rangeBool ( V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes ) => #abiCallData ( "serializeBytes" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V2_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeBytes32 ( V0_objectKey : string , V1_valueKey : string , V2_value : bytes32 ) => #abiCallData ( "serializeBytes32" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #bytes32 ( V2_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeInt ( V0_objectKey : string , V1_valueKey : string , V2_value : int256 ) => #abiCallData ( "serializeInt" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #int256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeJson ( V0_objectKey : string , V1_value : string ) => #abiCallData ( "serializeJson" , #string ( V0_objectKey ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeString ( V0_objectKey : string , V1_valueKey : string , V2_value : string ) => #abiCallData ( "serializeString" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #string ( V2_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KserializeUint ( V0_objectKey : string , V1_valueKey : string , V2_value : uint256 ) => #abiCallData ( "serializeUint" , #string ( V0_objectKey ) , #string ( V1_valueKey ) , #uint256 ( V2_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V2_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KsetEnv ( V0_name : string , V1_value : string ) => #abiCallData ( "setEnv" , #string ( V0_name ) , #string ( V1_value ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksign ( V0_addr : address , V1_publicKeyX : uint256 , V2_publicKeyY : uint256 , V3_privateKey : uint256 , V4_digest : bytes32 ) => #abiCallData ( "sign" , #tuple ( #address ( V0_addr ) , #uint256 ( V1_publicKeyX ) , #uint256 ( V2_publicKeyY ) , #uint256 ( V3_privateKey ) , .TypedArgs ) , #bytes32 ( V4_digest ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_addr )
       andBool ( #rangeUInt ( 256 , V1_publicKeyX )
       andBool ( #rangeUInt ( 256 , V2_publicKeyY )
       andBool ( #rangeUInt ( 256 , V3_privateKey )
       andBool ( #rangeBytes ( 32 , V4_digest )
               )))))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksign ( V0_privateKey : uint256 , V1_digest : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_privateKey ) , #bytes32 ( V1_digest ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_privateKey )
       andBool ( #rangeBytes ( 32 , V1_digest )
               ))
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2Ksleep ( V0_duration : uint256 ) => #abiCallData ( "sleep" , #uint256 ( V0_duration ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_duration )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_signer : address ) => #abiCallData ( "startBroadcast" , #address ( V0_signer ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_signer )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartBroadcast ( V0_privateKey : uint256 ) => #abiCallData ( "startBroadcast" , #uint256 ( V0_privateKey ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_privateKey )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartMappingRecording ( ) => #abiCallData ( "startMappingRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstartStateDiffRecording ( ) => #abiCallData ( "startStateDiffRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopAndReturnStateDiff ( ) => #abiCallData ( "stopAndReturnStateDiff" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KstopMappingRecording ( ) => #abiCallData ( "stopMappingRecording" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : address ) => #abiCallData ( "toString" , #address ( V0_value ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bool ) => #abiCallData ( "toString" , #bool ( V0_value ) , .TypedArgs ) )
       ensures #rangeBool ( V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes ) => #abiCallData ( "toString" , #bytes ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_value ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_value ) , .TypedArgs ) )
       ensures #rangeBytes ( 32 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : int256 ) => #abiCallData ( "toString" , #int256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KtoString ( V0_value : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KunixTime ( ) => #abiCallData ( "unixTime" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFile ( V0_path : string , V1_data : string ) => #abiCallData ( "writeFile" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteFileBinary ( V0_path : string , V1_data : bytes ) => #abiCallData ( "writeFileBinary" , #string ( V0_path ) , #bytes ( V1_data ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V1_data ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteJson ( V0_json : string , V1_path : string , V2_valueKey : string ) => #abiCallData ( "writeJson" , #string ( V0_json ) , #string ( V1_path ) , #string ( V2_valueKey ) , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModVmSafe . S2KwriteLine ( V0_path : string , V1_data : string ) => #abiCallData ( "writeLine" , #string ( V0_path ) , #string ( V1_data ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "breakpoint(string)" ) => 4028997266 )
      
    
    rule  ( selector ( "breakpoint(string,bool)" ) => 4157840013 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "broadcast(uint256)" ) => 4135229019 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "computeCreate2Address(bytes32,bytes32)" ) => 2299275323 )
      
    
    rule  ( selector ( "computeCreate2Address(bytes32,bytes32,address)" ) => 3542319722 )
      
    
    rule  ( selector ( "computeCreateAddress(address,uint256)" ) => 1952676474 )
      
    
    rule  ( selector ( "copyFile(string,string)" ) => 2773125080 )
      
    
    rule  ( selector ( "createDir(string,bool)" ) => 378234067 )
      
    
    rule  ( selector ( "createWallet(string)" ) => 1946481106 )
      
    
    rule  ( selector ( "createWallet(uint256)" ) => 2053594038 )
      
    
    rule  ( selector ( "createWallet(uint256,string)" ) => 3984348258 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envOr(string,address)" ) => 1444930880 )
      
    
    rule  ( selector ( "envOr(string,bool)" ) => 1199043535 )
      
    
    rule  ( selector ( "envOr(string,bytes)" ) => 3018094341 )
      
    
    rule  ( selector ( "envOr(string,bytes32)" ) => 3030931602 )
      
    
    rule  ( selector ( "envOr(string,int256)" ) => 3150672190 )
      
    
    rule  ( selector ( "envOr(string,string)" ) => 3510989676 )
      
    
    rule  ( selector ( "envOr(string,string,address[])" ) => 3343818219 )
      
    
    rule  ( selector ( "envOr(string,string,bool[])" ) => 3951421499 )
      
    
    rule  ( selector ( "envOr(string,string,bytes32[])" ) => 578941799 )
      
    
    rule  ( selector ( "envOr(string,string,bytes[])" ) => 1690058340 )
      
    
    rule  ( selector ( "envOr(string,string,int256[])" ) => 1191237451 )
      
    
    rule  ( selector ( "envOr(string,string,string[])" ) => 2240943804 )
      
    
    rule  ( selector ( "envOr(string,string,uint256[])" ) => 1949402408 )
      
    
    rule  ( selector ( "envOr(string,uint256)" ) => 1586967695 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "eth_getLogs(uint256,uint256,address,bytes32[])" ) => 903951515 )
      
    
    rule  ( selector ( "exists(string)" ) => 639251006 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "fsMetadata(string)" ) => 2939587080 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getDeployedCode(string)" ) => 1052734388 )
      
    
    rule  ( selector ( "getLabel(address)" ) => 681724336 )
      
    
    rule  ( selector ( "getMappingKeyAndParentOf(address,bytes32)" ) => 2272142566 )
      
    
    rule  ( selector ( "getMappingLength(address,bytes32)" ) => 791664191 )
      
    
    rule  ( selector ( "getMappingSlotAt(address,bytes32,uint256)" ) => 3955702452 )
      
    
    rule  ( selector ( "getNonce((address,uint256,uint256,uint256))" ) => 2775878317 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "isDir(string)" ) => 2098581529 )
      
    
    rule  ( selector ( "isFile(string)" ) => 3773498580 )
      
    
    rule  ( selector ( "keyExists(string,string)" ) => 1384802364 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "parseAddress(string)" ) => 3335390621 )
      
    
    rule  ( selector ( "parseBool(string)" ) => 2538535204 )
      
    
    rule  ( selector ( "parseBytes(string)" ) => 2405245741 )
      
    
    rule  ( selector ( "parseBytes32(string)" ) => 142503553 )
      
    
    rule  ( selector ( "parseInt(string)" ) => 1110731870 )
      
    
    rule  ( selector ( "parseJson(string)" ) => 1786929162 )
      
    
    rule  ( selector ( "parseJson(string,string)" ) => 2241072881 )
      
    
    rule  ( selector ( "parseJsonAddress(string,string)" ) => 505013847 )
      
    
    rule  ( selector ( "parseJsonAddressArray(string,string)" ) => 802060419 )
      
    
    rule  ( selector ( "parseJsonBool(string,string)" ) => 2676415633 )
      
    
    rule  ( selector ( "parseJsonBoolArray(string,string)" ) => 2448669007 )
      
    
    rule  ( selector ( "parseJsonBytes(string,string)" ) => 4254211048 )
      
    
    rule  ( selector ( "parseJsonBytes32(string,string)" ) => 393733533 )
      
    
    rule  ( selector ( "parseJsonBytes32Array(string,string)" ) => 2445761475 )
      
    
    rule  ( selector ( "parseJsonBytesArray(string,string)" ) => 1714530969 )
      
    
    rule  ( selector ( "parseJsonInt(string,string)" ) => 2063895757 )
      
    
    rule  ( selector ( "parseJsonIntArray(string,string)" ) => 2575549066 )
      
    
    rule  ( selector ( "parseJsonKeys(string,string)" ) => 557728152 )
      
    
    rule  ( selector ( "parseJsonString(string,string)" ) => 1237646024 )
      
    
    rule  ( selector ( "parseJsonStringArray(string,string)" ) => 1234164980 )
      
    
    rule  ( selector ( "parseJsonUint(string,string)" ) => 2916999862 )
      
    
    rule  ( selector ( "parseJsonUintArray(string,string)" ) => 1377858731 )
      
    
    rule  ( selector ( "parseUint(string)" ) => 4203824461 )
      
    
    rule  ( selector ( "pauseGasMetering()" ) => 3517297519 )
      
    
    rule  ( selector ( "projectRoot()" ) => 3643842790 )
      
    
    rule  ( selector ( "readDir(string)" ) => 3300678112 )
      
    
    rule  ( selector ( "readDir(string,uint64)" ) => 345474924 )
      
    
    rule  ( selector ( "readDir(string,uint64,bool)" ) => 2164446989 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readFileBinary(string)" ) => 384662468 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "readLink(string)" ) => 2673247394 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "rememberKey(uint256)" ) => 571474020 )
      
    
    rule  ( selector ( "removeDir(string,bool)" ) => 1170612241 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "resumeGasMetering()" ) => 734875872 )
      
    
    rule  ( selector ( "rpc(string,string)" ) => 302434472 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrlStructs()" ) => 2636830506 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address)" ) => 2536267874 )
      
    
    rule  ( selector ( "serializeAddress(string,string,address[])" ) => 506818074 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool)" ) => 2887969137 )
      
    
    rule  ( selector ( "serializeBool(string,string,bool[])" ) => 2459064993 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes)" ) => 4062008007 )
      
    
    rule  ( selector ( "serializeBytes(string,string,bytes[])" ) => 2558833202 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32)" ) => 763439940 )
      
    
    rule  ( selector ( "serializeBytes32(string,string,bytes32[])" ) => 538854370 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256)" ) => 1060363104 )
      
    
    rule  ( selector ( "serializeInt(string,string,int256[])" ) => 1987502375 )
      
    
    rule  ( selector ( "serializeJson(string,string)" ) => 2603833520 )
      
    
    rule  ( selector ( "serializeString(string,string,string)" ) => 2296016181 )
      
    
    rule  ( selector ( "serializeString(string,string,string[])" ) => 1444730611 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256)" ) => 312381442 )
      
    
    rule  ( selector ( "serializeUint(string,string,uint256[])" ) => 4276724841 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "sign((address,uint256,uint256,uint256),bytes32)" ) => 2992396837 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "sleep(uint256)" ) => 4204627731 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startBroadcast(uint256)" ) => 3464592711 )
      
    
    rule  ( selector ( "startMappingRecording()" ) => 1050084800 )
      
    
    rule  ( selector ( "startStateDiffRecording()" ) => 3475170249 )
      
    
    rule  ( selector ( "stopAndReturnStateDiff()" ) => 2858219790 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopMappingRecording()" ) => 222998171 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "tryFfi(string[])" ) => 4099677415 )
      
    
    rule  ( selector ( "unixTime()" ) => 1649641436 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeFileBinary(string,bytes)" ) => 522321024 )
      
    
    rule  ( selector ( "writeJson(string,string)" ) => 3795636639 )
      
    
    rule  ( selector ( "writeJson(string,string,string)" ) => 903261510 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsoleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole" [symbol(), klabel(contract_lib%forge-std%src%console)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModconsole ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f34bcbac984e756da33ec3e22a86c241e142a52846d6b72386d67704f9480f4664736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f34bcbac984e756da33ec3e22a86c241e142a52846d6b72386d67704f9480f4664736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModconsole2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModconsole2Contract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModconsole2Contract ::= "S2KlibZModforgeZSubstdZModsrcZModconsole2" [symbol(), klabel(contract_lib%forge-std%src%console2)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModconsole2 ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200585739481af57d7f1d0116e01732c7b3bbaed1f82fc221e88c5437194fc8c1064736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModconsole2 ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200585739481af57d7f1d0116e01732c7b3bbaed1f82fc221e88c5437194fc8c1064736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModsafeconsole-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModsafeconsoleContract ::= "S2KlibZModforgeZSubstdZModsrcZModsafeconsole" [symbol(), klabel(contract_lib%forge-std%src%safeconsole)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModsafeconsole ) => #parseByteStack ( "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fdda951efe8a6aca487916b91fa2ad6c9609527e392441843da4b72de3ebe31564736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModsafeconsole ) => #parseByteStack ( "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fdda951efe8a6aca487916b91fa2ad6c9609527e392441843da4b72de3ebe31564736f6c63430008150033" ) )
      

endmodule

module S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract ::= "S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest" [symbol(), klabel(contract_lib%forge-std%lib%ds-test%src%DSTest)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101bf565b60408051601f198184030181529082905261012c916101e3565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b509150508080602001905181019061018691906101f6565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b50600093019283525090919050565b6001600160e01b03198316815260006101db600483018461018f565b949350505050565b60006101ef828461018f565b9392505050565b60006020828403121561020857600080fd5b815180151581146101ef57600080fdfea264697066735822122056fc5ebada6eefa8332c92f77c031cc46bba429414af7167d762f5afdbfb4bee64736f6c63430008150033" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest ) => #parseByteStack ( "0x60806040526000805460ff1916600117905534801561001d57600080fd5b5061024e8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ba414fa61461003b578063fa7626d414610057575b600080fd5b610043610064565b604051901515815260200160405180910390f35b6000546100439060ff1681565b60008054610100900460ff16156100845750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561018a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610112917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016101bf565b60408051601f198184030181529082905261012c916101e3565b6000604051808303816000865af19150503d8060008114610169576040519150601f19603f3d011682016040523d82523d6000602084013e61016e565b606091505b509150508080602001905181019061018691906101f6565b9150505b919050565b6000815160005b818110156101b05760208185018101518683015201610196565b50600093019283525090919050565b6001600160e01b03198316815260006101db600483018461018f565b949350505050565b60006101ef828461018f565b9392505050565b60006020828403121561020857600080fd5b815180151581146101ef57600080fdfea264697066735822122056fc5ebada6eefa8332c92f77c031cc46bba429414af7167d762f5afdbfb4bee64736f6c63430008150033" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestContract "." S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod [function(), symbol(), klabel(method_lib%forge-std%lib%ds-test%src%DSTest)]
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_DSTest_S2KISZUndTEST_)]
    
    syntax S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_DSTest_S2Kfailed_)]
    
    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModlibZModdsZSubtestZModsrcZModDSTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule

module S2KlibZModforgeZSubstdZModsrcZModTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KlibZModforgeZSubstdZModsrcZModTestContract
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestContract ::= "S2KlibZModforgeZSubstdZModsrcZModTest" [symbol(), klabel(contract_lib%forge-std%src%Test)]
    
    rule  ( #binRuntime ( S2KlibZModforgeZSubstdZModsrcZModTest ) => #parseByteStack ( "0x" ) )
      
    
    rule  ( #initBytecode ( S2KlibZModforgeZSubstdZModsrcZModTest ) => #parseByteStack ( "0x" ) )
      
    
    syntax Bytes ::= S2KlibZModforgeZSubstdZModsrcZModTestContract "." S2KlibZModforgeZSubstdZModsrcZModTestMethod [function(), symbol(), klabel(method_lib%forge-std%src%Test)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KISZUndTEST" "(" ")" [symbol(), klabel(method_Test_S2KISZUndTEST_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeArtifacts" "(" ")" [symbol(), klabel(method_Test_S2KexcludeArtifacts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeContracts" "(" ")" [symbol(), klabel(method_Test_S2KexcludeContracts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KexcludeSenders" "(" ")" [symbol(), klabel(method_Test_S2KexcludeSenders_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2Kfailed" "(" ")" [symbol(), klabel(method_Test_S2Kfailed_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifactSelectors" "(" ")" [symbol(), klabel(method_Test_S2KtargetArtifactSelectors_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetArtifacts" "(" ")" [symbol(), klabel(method_Test_S2KtargetArtifacts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetContracts" "(" ")" [symbol(), klabel(method_Test_S2KtargetContracts_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetInterfaces" "(" ")" [symbol(), klabel(method_Test_S2KtargetInterfaces_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSelectors" "(" ")" [symbol(), klabel(method_Test_S2KtargetSelectors_)]
    
    syntax S2KlibZModforgeZSubstdZModsrcZModTestMethod ::= "S2KtargetSenders" "(" ")" [symbol(), klabel(method_Test_S2KtargetSenders_)]
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KISZUndTEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeArtifacts ( ) => #abiCallData ( "excludeArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeContracts ( ) => #abiCallData ( "excludeContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KexcludeSenders ( ) => #abiCallData ( "excludeSenders" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2Kfailed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifactSelectors ( ) => #abiCallData ( "targetArtifactSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetArtifacts ( ) => #abiCallData ( "targetArtifacts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetContracts ( ) => #abiCallData ( "targetContracts" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetInterfaces ( ) => #abiCallData ( "targetInterfaces" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSelectors ( ) => #abiCallData ( "targetSelectors" , .TypedArgs ) )
      
    
    rule  ( S2KlibZModforgeZSubstdZModsrcZModTest . S2KtargetSenders ( ) => #abiCallData ( "targetSenders" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "excludeArtifacts()" ) => 3041954473 )
      
    
    rule  ( selector ( "excludeContracts()" ) => 3792478065 )
      
    
    rule  ( selector ( "excludeSenders()" ) => 517440284 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "targetArtifactSelectors()" ) => 1725540768 )
      
    
    rule  ( selector ( "targetArtifacts()" ) => 2233625729 )
      
    
    rule  ( selector ( "targetContracts()" ) => 1064470260 )
      
    
    rule  ( selector ( "targetInterfaces()" ) => 719206528 )
      
    
    rule  ( selector ( "targetSelectors()" ) => 2439649222 )
      
    
    rule  ( selector ( "targetSenders()" ) => 1046363171 )
      

endmodule
